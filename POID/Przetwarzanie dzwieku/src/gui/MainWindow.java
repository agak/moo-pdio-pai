/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import WavFile.WavFile;
import java.awt.event.ContainerEvent;
import java.awt.event.ContainerListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import sys.*;

/**
 *
 * @author Lukasz
 */
public class MainWindow extends javax.swing.JFrame {

    private static FilenameExtensionOnly WavFilesExtension = new FilenameExtensionOnly("wav");
    public List<TabPanel> panels;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        panels = new ArrayList<TabPanel>();
        this.closableTabbedPane.addContainerListener(new ContainerListener() {

            @Override
            public void componentAdded(ContainerEvent e) {
                doTest();
            }

            @Override
            public void componentRemoved(ContainerEvent e) {
                doTest();
            }
        });
        doTest();
    }

    private void doTest() {
        jOptionMenu.setEnabled(closableTabbedPane.getTabCount() == 0 ? false : true);
    }

    public void processPath(File path, boolean cepstrum, boolean amdf) {
        List<File> files = new ArrayList<File>();
        if (path.exists()) {
            if (path.isDirectory()) {
                files.addAll(Arrays.asList(path.listFiles(WavFilesExtension)));
            } else if (WavFilesExtension.accept(path, path.getName())) {
                files.add(path);
            }
        }

        if (files.isEmpty()) {
            System.out.println("Błędnie podany plik w argumentach.");
        }
        for (File f : files) {
            try {
                WavFile wavFile = WavFile.openWavFile(f);
                wavFile.display();

                int numChannels = wavFile.getNumChannels();

                int signal_counter = 0;
                double[] signal = new double[(int) wavFile.getFramesRemaining()];

                double[] buffer = new double[100 * numChannels];

                int framesRead;

                do {
                    framesRead = wavFile.readFrames(buffer, 100);
                    for (int s = 0; s < framesRead * numChannels; s++) {
                        signal[signal_counter * 100 + s] = buffer[s];

                    }
                    //System.arraycopy(buffer, 0, signal, signal_counter * 100, framesRead * numChannels);
                    signal_counter++;

                } while (framesRead != 0);
                wavFile.close();
                TabPanel tp = new TabPanel(signal, wavFile);
                panels.add(tp);
                this.closableTabbedPane.addTab(f.getName(), tp);
                //this.closableTabbedPane.setSelectedIndex((this.closableTabbedPane.getTabCount() - 1));
            } catch (Exception e) {
                e.printStackTrace();
                System.err.println(e);
            }
        }
        ThreadProcesor procesor = new ThreadProcesor(panels,true, cepstrum, amdf);
        procesor.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser = new javax.swing.JFileChooser();
        closableTabbedPane = new gui.ClosableTabbedPane();
        jMenuBar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        openFile = new javax.swing.JMenuItem();
        openDir = new javax.swing.JMenuItem();
        jOptionMenu = new javax.swing.JMenu();
        jCepstrumMenuItem = new javax.swing.JMenuItem();
        jCepstrumAllMenuItem = new javax.swing.JMenuItem();
        jAmdfMenuItem = new javax.swing.JMenuItem();
        jAmdfAllMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(600, 600));
        setPreferredSize(new java.awt.Dimension(600, 600));
        getContentPane().add(closableTabbedPane, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");

        openFile.setText("Open File");
        openFile.setActionCommand("Open file");
        openFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileActionPerformed(evt);
            }
        });
        jMenu1.add(openFile);

        openDir.setText("Open folder");
        openDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openDirActionPerformed(evt);
            }
        });
        jMenu1.add(openDir);

        jMenuBar.add(jMenu1);

        jOptionMenu.setText("Option");

        jCepstrumMenuItem.setText("Cepstrum");
        jCepstrumMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCepstrumMenuItemActionPerformed(evt);
            }
        });
        jOptionMenu.add(jCepstrumMenuItem);

        jCepstrumAllMenuItem.setText("Cepstrum all");
        jCepstrumAllMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCepstrumAllMenuItemActionPerformed(evt);
            }
        });
        jOptionMenu.add(jCepstrumAllMenuItem);

        jAmdfMenuItem.setText("AMDF");
        jAmdfMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAmdfMenuItemActionPerformed(evt);
            }
        });
        jOptionMenu.add(jAmdfMenuItem);

        jAmdfAllMenuItem.setText("AMDF all");
        jAmdfAllMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAmdfAllMenuItemActionPerformed(evt);
            }
        });
        jOptionMenu.add(jAmdfAllMenuItem);

        jMenuBar.add(jOptionMenu);

        setJMenuBar(jMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileActionPerformed
        this.jFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        this.jFileChooser.setFileFilter(WavFilesExtension);
        int returnVal = this.jFileChooser.showDialog(this, "Open file");

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            processPath(this.jFileChooser.getSelectedFile(), false, false);
        }
    }//GEN-LAST:event_openFileActionPerformed

    private void openDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openDirActionPerformed
        this.jFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        this.jFileChooser.setFileFilter(null);
        int returnVal = this.jFileChooser.showDialog(this, "Open file");

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            processPath(this.jFileChooser.getSelectedFile(), false, false);
        }
    }//GEN-LAST:event_openDirActionPerformed

    private void jCepstrumMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCepstrumMenuItemActionPerformed
        int selectedTabIndex = closableTabbedPane.getSelectedIndex();
        if (selectedTabIndex != -1) {
            TabPanel panel = (TabPanel) closableTabbedPane.getComponentAt(selectedTabIndex);
            CepstrumAnalysis ca = new CepstrumAnalysis(panel.signal, panel.wavFile);
            ca.process();
            panel.addPlotData(PlotData.generatePlotData(ca.d, "Cepstrum", 0));

        }
    }//GEN-LAST:event_jCepstrumMenuItemActionPerformed

    private void jAmdfMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAmdfMenuItemActionPerformed
        int selectedTabIndex = closableTabbedPane.getSelectedIndex();
        if (selectedTabIndex != -1) {
            TabPanel panel = (TabPanel) closableTabbedPane.getComponentAt(selectedTabIndex);
             AMDF a = new AMDF(panel.signal, panel.wavFile);
                    a.process();
                    panel.addPlotData(PlotData.generatePlotData(a.d, "AMDF", 0));
        }
    }//GEN-LAST:event_jAmdfMenuItemActionPerformed

    private void jCepstrumAllMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCepstrumAllMenuItemActionPerformed
        ThreadProcesor procesor = new ThreadProcesor(panels,false, true, false);
        procesor.start();
    }//GEN-LAST:event_jCepstrumAllMenuItemActionPerformed

    private void jAmdfAllMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAmdfAllMenuItemActionPerformed
        ThreadProcesor procesor = new ThreadProcesor(panels,false, false, true);
        procesor.start();
    }//GEN-LAST:event_jAmdfAllMenuItemActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private gui.ClosableTabbedPane closableTabbedPane;
    private javax.swing.JMenuItem jAmdfAllMenuItem;
    private javax.swing.JMenuItem jAmdfMenuItem;
    private javax.swing.JMenuItem jCepstrumAllMenuItem;
    private javax.swing.JMenuItem jCepstrumMenuItem;
    private javax.swing.JFileChooser jFileChooser;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jOptionMenu;
    private javax.swing.JMenuItem openDir;
    private javax.swing.JMenuItem openFile;
    // End of variables declaration//GEN-END:variables
}
